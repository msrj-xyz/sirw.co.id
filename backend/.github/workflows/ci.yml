name: CI

on:
  push:
    branches: [ master, feat/backend ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres -d test"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      NODE_ENV: test
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/test
      REDIS_URL: redis://localhost:6379
      GCS_KEYFILE: ./production-474702-53cc19b4173b.json
      GCS_BUCKET: ${{ secrets.GCS_BUCKET }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'
      - name: Install dependencies
        run: npm ci
      - name: Optionally write GCP keyfile (for GCS tests)
        if: ${{ secrets.GCP_KEY != '' }}
        run: |
          echo "$GCP_KEY" > $GCS_KEYFILE
        env:
          GCP_KEY: ${{ secrets.GCP_KEY }}
          GCS_KEYFILE: ${{ env.GCS_KEYFILE }}
      - name: Generate Prisma client
        run: npm run prisma:generate
      - name: Apply database migrations
        run: npx prisma migrate deploy
      - name: TypeScript compile
        run: npm run build
      - name: Lint
        run: npm run lint
      - name: Audit (production=false, level=high)
        run: npm audit --production=false --audit-level=high || true
      - name: Run tests
        # Keep tests single-threaded in CI to avoid flaky DB race conditions
        run: npm test -- --runInBand --detectOpenHandles --globalTeardown=./src/jest.globalTeardown.ts
